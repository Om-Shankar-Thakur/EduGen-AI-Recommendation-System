# -*- coding: utf-8 -*-
"""Personalised recommendation system Plots.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGFAoYbxxtYfX7oYxiOUkWfwZ2QNfIUO
"""

import matplotlib.pyplot as plt

import numpy as np

sessions = list(range(1, 11))
traditional_accuracy = [50, 52, 54, 55, 56, 57, 57, 58, 58, 59]
edugen_accuracy = [50, 55, 60, 65, 70, 75, 77, 79, 81, 83]

plt.figure(figsize=(10, 5))
plt.plot(sessions, traditional_accuracy, marker='o', label='Traditional Engine')
plt.plot(sessions, edugen_accuracy, marker='s', label='EduGen (Generative AI)')
plt.xlabel('Session Number')
plt.ylabel('Recommendation Accuracy (%)')
plt.title('Learning Recommendation Accuracy Over Sessions')
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

labels = ['Personalization', 'Real-time Adaptation', 'Semantic Matching',
          'Feedback Loop', 'Cold-start Handling', 'Generative Ability']
coursera = [2, 0, 2, 2, 0, 1]
edugen = [5, 5, 5, 5, 4, 5]

angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
coursera += coursera[:1]
edugen += edugen[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
ax.plot(angles, coursera, label='Coursera', linewidth=2)
ax.fill(angles, coursera, alpha=0.25)
ax.plot(angles, edugen, label='EduGen', linewidth=2)
ax.fill(angles, edugen, alpha=0.25)

ax.set_yticks([1, 2, 3, 4, 5])
ax.set_xticks(angles[:-1])
ax.set_xticklabels(labels)
ax.set_title('Capability Radar Comparison')
ax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))
plt.tight_layout()
plt.show()

platforms = ['Coursera', 'EduGen']
features = {
    'Content Personalization': [2, 4],
    'Real-time Adaptation': [0, 3],
    'NLP/LLM Integration': [1, 5],
    'Semantic Matching': [2, 5],
    'Recommendation Model': [2, 5],
    'Feedback Loop': [2, 5],
    'User Modeling': [2, 4],
}

x = range(len(features))
width = 0.35

plt.figure(figsize=(12, 6))
plt.bar([i - width/2 for i in x], [v[0] for v in features.values()], width=width, label='Coursera')
plt.bar([i + width/2 for i in x], [v[1] for v in features.values()], width=width, label='EduGen')

plt.xticks(ticks=x, labels=features.keys(), rotation=45, ha='right')
plt.ylabel('Capability Score (0-5)')
plt.title('Feature Comparison: EduGen vs Coursera')
plt.legend()
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Features and scores
features = [
    "Content Personalization",  "NLP/LLM Integration",
    "Semantic Matching", "Recommendation Model", "Feedback Loop", "User Modeling"
]

coursera_scores = [2, 1, 2, 2, 2, 2]
edugen_scores = [4, 5, 5, 5, 5, 4]

x = np.arange(len(features))  # Label locations
width = 0.35  # Bar width

# Plotting
fig, ax = plt.subplots(figsize=(12, 6))
bars1 = ax.bar(x - width/2, coursera_scores, width, label='Coursera', color='royalblue')
bars2 = ax.bar(x + width/2, edugen_scores, width, label='EduGen', color='darkorange')

# Labels, Title, and Ticks
ax.set_ylabel('Capability Score (0-5)')
ax.set_title('Feature Comparison: EduGen vs Coursera')
ax.set_xticks(x)
ax.set_xticklabels(features, rotation=45, ha='right')
ax.legend()

# Grid and layout
ax.yaxis.grid(True)
fig.tight_layout()

plt.show()

platforms = ['EduGen', 'Coursera', 'Adaptive LMS']
accuracy_over_time = {
    'Week 1': [0.68, 0.55, 0.60],
    'Week 2': [0.64, 0.57, 0.62],
    'Week 3': [0.81, 0.58, 0.65],
    'Week 4': [0.87, 0.58, 0.66]
}

weeks = list(accuracy_over_time.keys())

for i, platform in enumerate(platforms):
    plt.plot(weeks, [accuracy_over_time[week][i] for week in weeks], label=platform)

plt.xlabel("Time")
plt.ylabel("Recommendation Accuracy")
plt.title("EduGen vs Others: Accuracy Over Time")
plt.legend()
plt.tight_layout()
plt.grid(True)
plt.savefig("recommendation_accuracy_over_time.png")  # Save in same folder as .tex file
plt.show()

# Features and their corresponding scores
labels = ['Adaptability', 'Feedback Loop', 'Semantic Matching', 'Personalization', 'Scalability']
edugen_stats = [9, 9, 9, 10, 9]
coursera_stats = [5, 5, 4, 6, 8]
traditional_stats = [4, 3, 3, 5, 6]

# Close the loop for radar plot
stats = [edugen_stats, coursera_stats, traditional_stats]
for i in range(len(stats)):
    stats[i].append(stats[i][0])  # Close the radar loop

# Compute angles
angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
angles += angles[:1]  # Close the loop

# Setup figure
fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

# Plot each platform
ax.plot(angles, stats[0], label='EduGen', linewidth=2)
ax.fill(angles, stats[0], alpha=0.25)

ax.plot(angles, stats[1], label='Coursera', linewidth=2)
ax.fill(angles, stats[1], alpha=0.25)

ax.plot(angles, stats[2], label='Traditional LMS', linewidth=2)
ax.fill(angles, stats[2], alpha=0.25)

# üõ†Ô∏è Set labels only for the original axes (no duplicate at the end)
ax.set_thetagrids(np.degrees(angles[:-1]), labels)

# Style
ax.grid(True)
plt.legend(loc='upper right', bbox_to_anchor=(1.3, 1.1))
plt.tight_layout()

# Save the plot
plt.savefig("radar_comparison_chart.png")
plt.show()

